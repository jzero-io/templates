// Code generated by jzero. DO NOT EDIT.
// type: fake_{{.Resource}}

package fake

import (
	"context"

	{{range $k, $v := .HTTPInterfaces}}{{if or $v.IsStreamServer $v.IsStreamClient $v.IsSpecified}}"{{$.Module}}/rest"{{break}}{{end}}{{end}}

	{{range $v := .GoImportPaths | uniq}}"{{$v}}"
	{{end}}
)

var (
	{{range $k, $v := .HTTPInterfaces}}FakeReturn{{$v.MethodName}} = &{{if or $v.IsStreamServer $v.IsStreamClient $v.IsSpecified}}rest.Request{}{{else}}{{$v.ResponseBody.Package | base}}.{{$v.ResponseBody.Name}}{}{{end}}
	{{end}}
)

type {{.Resource | FirstUpper}}Getter interface {
	{{.Resource | FirstUpper}}() {{.Resource | FirstUpper}}Interface

	Fake{{.Resource | FirstUpper}}Expansion
}

type {{.Resource | FirstUpper}}Interface interface {
	{{range $k, $v := .HTTPInterfaces}}{{$v.MethodName}}({{if or $v.IsStreamServer $v.IsStreamClient $v.IsSpecified}}{{else}}ctx context.Context,{{end}} param *{{$v.RequestBody.Package | base}}.{{$v.RequestBody.Name}}) ({{if or $v.IsStreamServer $v.IsStreamClient $v.IsSpecified}}*rest.Request{{else}}*{{$v.ResponseBody.Package | base}}.{{$v.ResponseBody.Name}}{{end}}, error)
	{{end}}
}

type Fake{{.Resource | FirstUpper}} struct {
	Fake *Fake{{.Scope | FirstUpper}}
}

{{range $k, $v := .HTTPInterfaces}}func (f *Fake{{$.Resource | FirstUpper}}) {{$v.MethodName}}({{if or $v.IsStreamServer $v.IsStreamClient $v.IsSpecified}}{{else}}ctx context.Context,{{end}}param *{{$v.RequestBody.Package | base}}.{{$v.RequestBody.Name}}) ({{if or $v.IsStreamServer $v.IsStreamClient $v.IsSpecified}}*rest.Request{{else}}*{{$v.ResponseBody.Package | base}}.{{$v.ResponseBody.Name}}{{end}}, error) {
	return FakeReturn{{$v.MethodName}}, nil
}

{{end}}